                  The Cryptokit library

OVERVIEW:

  The Cryptokit library for Objective Caml provides a variety of
  cryptographic primitives that can be used to implement cryptographic
  protocols in security-sensitive applications.  The primitives provided
  include:

  - Symmetric-key cryptography: AES, DES, Triple-DES, ARCfour,
      in ECB, CBC, CFB and OFB modes.
  - Public-key cryptography: RSA.
  - Hash functions and MACs: SHA-1, MD5, and MACs based on AES and DES.
  - Random number generation.
  - Encodings and compression: base 64, hexadecimal, Zlib compression.

  Additional ciphers and hashes can easily be used in conjunction with
  the library.  In particular, basic mechanisms such as chaining modes,
  output buffering, and padding are provided by generic classes that can
  easily be composed with user-provided ciphers.  More generally, the library
  promotes a "Lego"-like style of constructing and composing
  transformations over character streams.

  This library is distributed under the conditions of the 
  GNU Library General Public license version 2, with the special
  exception on linking described in file LICENSE.

REQUIREMENTS:

  - Objective Caml 3.04 or up.

  - The Zlib C library, version 1.1.3 or up.  If it is not installed on
    your system (look for libz.a or libz.so), get it from
    http://www.gzip.org/.  If you are running Linux or BSD, chances
    are that your distribution provides precompiled binaries for this
    library.

  - If the operating system does not provide the /dev/random device
    (for random number generation), consider installing the EGD
    entropy gathering daemon http://egd.sourceforge.net/
    Without /dev/random or EGD, this library cannot generate random data
    and RSA keys.  The remainder of the library still works, though.


INSTALLATION:

  - Edit the three variables at the beginning of the Makefile to reflect
    the location where Zlib is installed on your system.  The defaults
    are OK for Linux.

  - Do "make all".

  - If the Objective Caml native-code compiler is available on your platform
    (look for the "ocamlopt" executable), do "make allopt".

  - (Optional)  To test the library, do "make test".  You must have
    either /dev/random or EGD available for the test to succeed.

  - Become super-user if necessary and do "make install".
    This installs the library in the standard Objective Caml library directory.


DOCUMENTATION:

  See the HTML documentation in doc/index.html, or the extensive comments 
  in file cryptokit.mli

  Compilation options:      none
  ocamlc linking options:   unix.cma nums.cma cryptokit.cma
  ocamlopt linking options: unix.cmxa nums.cmxa cryptokit.cmxa


WARNINGS AND DISCLAIMERS:

  Disclaimer 1: the author is not an expert in cryptography.
  While reasonable care has been taken to select good, widely-used
  implementations of the ciphers and hashes, and follow recommended
  practices found in reputable applied cryptography textbooks,
  you are advised to review thoroughly the implementation of this module
  before using it in a security-critical application.

  Disclaimer 2: some knowledge of cryptography is needed to use
  effectively this library.  A recommended reading is the
  Handbook of Applied Cryptography http://www.cacr.math.uwaterloo.ca/hac/
  Building secure applications out of cryptographic primitives also
  requires a general background in computer security.

  Disclaimer 3: in some countries, the use, distribution, import
  and/or export of cryptographic applications is restricted by law.
  For instance, French laws require authorization to use ciphers
  with key size greater than 128 bits for confidentiality purposes
  (data encryption), while their use for authentication and data
  integrity purposes does not require authorization.  Make sure to
  comply with regulations applicable in your country.


DESIGN NOTES AND REFERENCES:

  The library is organized around the concept of "transforms".  A transform
  is an object that accepts strings, sub-strings, characters and bytes
  as input, transforms them, and buffers the output.  While it is possible
  to enter all input, then fetch the output, lower memory requirements
  can be achieved by purging the output periodically during data input.

  The AES implementation is the public-domain optimized reference
  implementation by Daemen, Rijmen and Barreto.

  The DES implementation is based on Outerbridge's popular "d3des"
  implementation.  This is not the fastest DES implementation available,
  but one of the cleanest.  Outerbridge's code is marked as public domain.

  ARCfour (``alleged RC4'') is implemented from scratch, based on the
  algorithm described in Schneier's _Applied_Cryptography_

  SHA-1 is also implemented from scratch, based on the algorithm
  described in the _Handbook_of_Applied_Cryptography_.   It passes the
  FIPS test vectors.

  MD5 uses the public-domain implementation by Colin Plumb that is also
  used in the OCaml runtime system for module Digest.

  RSA encryption and decryption was implemented from scratch, using
  OCaml's bignum library for arbitrary-precision arithmetic.  Modular
  exponentiation uses the trivial Russian peasant algorithm, because the
  bignum library does not support Montgomery modular multiplication.
  The Chinese remainder theorem is exploited when possible, though.
  Like all ciphers in this library, the RSA implementation is *not*
  protected against timing attacks.

  RSA key generation follows the algorithms used in PGP 2.6.3.
  Probabilistic primality testing is achieved by Fermat tests using the
  first 8 prime numbers.  While not as good on paper as a Miller-Rabin
  probabilistic primality test, this seems good enough for PGP, so it
  should be good enough for us.

  The seeded PRNG is a combination of AES encryption in CBC mode and a lagged
  Fibonacci generator with long period.  It appears to pass the Diehard
  statistical tests.  Still, better use the system RNG if high-quality
  random numbers are needed.


PERFORMANCE:

Some performance figures measured on an Athlon XP 1600:

 AES 128: raw encryption  21 Mbyte/s; with CBC and buffering  13 Mbytes/s
     DES: raw encryption  11 Mbyte/s; with CBC and buffering   7 Mbytes/s
    3DES: raw encryption 3.8 Mbyte/s; with CBC and buffering 3.2 Mbytes/s
    ARC4: raw encryption  40 Mbyte/s; with buffering          26 Mbytes/s
    SHA1: 29 Mbyte/s
     MD5: 72 Mbyte/s
 AES MAC: 15 Mbyte/s
RSA 1024: key generation 220 ms
          public-key operation (public exponent 65537) 0.52 ms
          private-key operation 29 ms
          private-key operation with CRT 11.4 ms
